(page "index.html"
  (:require
   [hoplon-stripe.stripe-rpc :as stripe]))

;; No need to require [cljsjs.stripe]
;; stripe.cljsjs package only provides an extern file required for advanced
;; compilation. The Stripe js API will still need to be provided through
;; some other mechanism.


(def months ["mm" "01" "02" "03" "04" "05" "06" "07" "08" "09" "10" "11" "12"])
(def years ["yyyy" "2016" "2017" "2018" "2019" "2020" "2021" "2022"])
(def qty ["1" "2" "3" "4" "5" "6"])

;;; CELLS

;; Messages


;; First step data, to be sent to stripe
(defc form-data
  {:name nil
   :email nil
   :postal-code nil
   :card-number nil
   :country "CA"
   :cvv nil
   :exp-month nil
   :exp-year nil
   :qty 1
   :amount 2000})

(def key-mappings {:postal-code  :address_zip
                   :country      :address_country
                   :card-number  :number
                   :cvv          :cvc
                   :exp-month    :exp_month
                   :exp-year     :exp_year})


;; Second step data, when the payment accepted, to be sent to app server
(defc token-data nil)



;;; HANDLERS

;; Cells handlers

(defn path-cell [c path]
  (cell= (get-in c path) (partial swap! c assoc-in path)))


(defn send-form [form-data token-data key-mappings]
  (stripe/get-stripe-token form-data token-data key-mappings))


;;; VIEWS

;; Elements

(defn jq-target-val [e]
  (->> e .-target js/jQuery .val))


(defelem input-field [{:keys [cell type] :as attrs}]
  (let [a {:value cell
           :keyup (fn [e] (->> e jq-target-val (reset! cell)))}]
    (input a)))

(defelem select-field [{:keys [items cell] :as attrs} _]
  (select (dissoc attrs :period)
          :change #(reset! cell (jq-target-val %))
          :value cell
          (loop-tpl :bindings [item items]
                    (option item))))


(defn payment-form []
  (div {:id "payment-form"}
       (div
        (label (text "Total : ~{(/ (:amount form-data) 100)}.00$")))
       (div {:class "form-row"}
            (label "Name")
            (input-field {:cell (path-cell form-data [:name])}))
       (div {:class "form-row"}
            (label "Email")
            (input-field {:cell (path-cell form-data [:email])}))
       (div {:class "form-row"}
            (label "Postal Code")
            (input-field {:cell (path-cell form-data [:postal-code])}))
        (div {:class "form-row"}
             (label "Card Number")
             (input-field {:cell (path-cell form-data [:card-number])}))
        (small "Test success with: 4242424242424242 or 5555555555554444")
        (small "Test card decline with: 4000000000000002")
        (small "Test incorrect number with: 4242424242424241")

        (div {:class "form-row"}
             (label "CVV")
             (input-field {:cell (path-cell form-data [:cvv])}))
        (div {:class "form-row"}
             (label "Expiration")
             (div {:class "expiry-wrapper"}
                  (select-field {:class "card-expiry-month stripe-sensitive required"
                                 :items months
                                 :cell (path-cell form-data [:exp-month])})

                  (span " / ")
                  (select-field {:class "card-expiry-year stripe-sensitive required"
                                 :items years
                                 :cell (path-cell form-data [:exp-year])})))
        (button {:click #(send-form form-data token-data key-mappings)} "Submit")
        (p :toggle stripe/success-message
           :css {:color "green"}
           (text "Success! ~{stripe/success-message}"))
        (p :toggle stripe/process-message
           :css {:color "#333"}
           (text "Processing... ~{stripe/process-message}"))
        (p :toggle stripe/error-message
           :css {:color "red"}
           (text "Oups! ~{stripe/error-message}"))))

;;; RENDER

;; JS

(defn stripe-init! [pk] (.setPublishableKey js/Stripe pk))

(defn ensure-stripe []
  (.getScript js/jQuery stripe/stripe-url #(stripe-init! stripe/stripe-pk)))

(with-init! (ensure-stripe))


;; HTML

(html
 (head
  (title "Stripe with Hoplon")
  (link :href "app.css" :rel "stylesheet")
  (link :href "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"
        :rel "stylesheet"))
 (body
  (div :class "container"
       (div :class "row"
            (div :class "col-xs-12"
                 (h1 "Stripe Example Form, with... Hoplon and Castra!"))))

  (div :class "row"
       (div :class "col-xs-12"
            (payment-form)))

  (div :class "row"
       (div :class "col-xs-12"
            (h3 "STATE :")
            (p :toggle form-data
               (text "Form data: ~{form-data}"))
            (p :toggle token-data
               (text "Token data: ~{token-data}"))
            (p :toggle stripe/order-data
               (text "Order data: ~{stripe/order-data}"))))

  (noscript
   (p "JavaScript is required for the registration form."))))
